$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$ Title
$ 커밋 메시지 Title은 `{#github_issue_num} [{type}] : Update README.md`처럼 작성한다. `{#github_issue_num}`는 Github issue num, `{type}`은 type, `Update README.md`는 Subject이다.
$ Github issue num
$ - 깃허브에서 자동적으로 정해주는 issue 번호를 사용한다.
$ Subject
$ - Subject는 크게 4가지의 특징을 가진다.
$ - Subject만 보고도 해당 작업을 판단할 수 있게 작성해준다.
$ - 길이는 50자 이하로 작성한다.
$ - 동사로 끝난다.
$ - 끝에는 마침표를 붙이지 않는다.
$ Type은 크게 7가지가 있다.
$ - [feat] : 새로운 기능 추가
$ - [fix] : 버그 수정
$ - [docs] : 문서 수정
$ - [style] : 코드 포맷 변경, 세미콜론 누락, 코드 변경 없음
$ - [refactor] : 프로덕션 코드 리팩터링
$ - [test] : 테스트 추가, 테스트 코드 리팩터링, 프로덕션 코드 변경 없음
$ - [build] : gradle 세팅, 패키지 추가
$ - [chore] : 빌드 테스크 업데이트, 패키지 매니저 환경설정, 프로덕션 코드 변경 없음
$ 아래부터 작성

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$ Body (What, Why)
$ 커밋 메시지는 대부분 Title만 읽어도 내용을 파악할 수 있다. 따라서, Body는 선택사항으로 커밋 메시지에 부가적인 설명이 필요할 때 작성한다.
$ Body는 크게 3가지의 특징을 가진다.
$ - ex) 모바일 버전에서 CardList의 img 부분 클릭 시 공백으로 나오는 오류 수정. PC버전은 이상없음.
$ - 길이는 72자 이하로 작성한다.
$ - Title과 Body 사이에는 한 줄의 공백을 추가한다.
$ - 커밋 메시지의 `What`과 `Why`에 대해 작성한다. `How`는 고려하지 않는다.
$ 아래부터 작성

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$ Option
$ Option 역시 선택사항이다. Option은 Body 끝에 한 줄의 공백을 추가한 후 작성한다. 참조 url 등을 작성한다.
$ 아래부터 작성

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$ Example
$ #13 [feat] : 클라이언트에서 받아온 토큰 디비에 저장하는 기능 추가

$ 디비에 성공적으로 저장시 토큰을 다시 클라이언트에게 반환.

$ 참조 url : https://www.naver.com
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$